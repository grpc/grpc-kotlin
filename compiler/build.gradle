plugins {
    id 'com.google.protobuf' version '0.8.11'

    // Generate IntelliJ IDEA's .idea & .iml project files
    // Starting with 0.8.4 of protobuf-gradle-plugin, *.proto and the gen output files are added
    // to IntelliJ as sources. It is no longer necessary to add them manually to the idea {} block
    // to jump to definitions from Java and Kotlin files.
    // For best results, install the Protobuf and Kotlin plugins for IntelliJ.
    id 'idea'

    // Provide convenience executables for trying out the examples.
    id 'application'
    id 'maven-publish'

    id 'edu.sc.seis.launch4j' version '2.4.4'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

description = 'The protoc plugin for gRPC Kotlin'
mainClassName = 'io.grpc.kotlin.generator.GeneratorRunner'

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Kotlin and Java
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.ext.coroutinesVersion}"
    compile "javax.annotation:javax.annotation-api:1.2"

    // Grpc and Protobuf
    compile project(':grpc-kotlin-stub')
    compile "com.google.protobuf:protobuf-java:${rootProject.ext.protobufVersion}"
    compile "io.grpc:grpc-protobuf:${rootProject.ext.grpcVersion}"
    compile "io.grpc:grpc-stub:${rootProject.ext.grpcVersion}"
    compile "io.grpc:grpc-netty-shaded:${rootProject.ext.grpcVersion}"

    // Misc
    compile 'com.squareup:kotlinpoet:1.5.0'
    compile "org.jetbrains.kotlin:kotlin-reflect:1.3.61"
    compile "com.google.truth:truth:1.0.1"

    // Testing
    testImplementation "junit:junit:4.12"
    testImplementation "com.google.guava:guava:28.2-jre"
    testImplementation "com.google.jimfs:jimfs:1.1"
    testImplementation 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.2"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${rootProject.ext.protobufVersion}" }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.ext.grpcVersion}"
        }
        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            path = "$buildDir/install/grpc-kotlin-compiler/bin/grpc-kotlin-compiler"
        }
    }
    generateProtoTasks {
        all().each { task ->
            if (task.name.startsWith('generateTestProto')) {
                task.dependsOn { installDist }
            }
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

task prependShellStub() {
    doLast {
        def stub = file("stub.sh")
        def plugin = new File("${buildDir}/artifacts/protoc-gen-grpc-kotlin")
        def tempScript = new File("${buildDir}/artifacts/protoc-gen-grpc-kotlin.stubbed")
        tempScript.write('') // truncate output if needed
        tempScript << stub.text.normalize() // remove carriage returns
        tempScript << plugin.bytes
        plugin.delete()
        tempScript.renameTo(plugin)
        plugin.setExecutable(true)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            // Removes all artifacts since grpc-kotlin-compiler doesn't generate any
            artifacts = []
            artifactId 'protoc-gen-grpc-kotlin'
            artifact("$buildDir/artifacts/protoc-gen-grpc-kotlin" as File) {
                classifier "osx-x86_64"
                extension "exe"
                builtBy prependShellStub
            }
            artifact("$buildDir/artifacts/protoc-gen-grpc-kotlin" as File) {
                classifier "linux-x86_64"
                extension "exe"
                builtBy prependShellStub
            }
            artifact("$buildDir/artifacts/protoc-gen-grpc-kotlin-windows-x86_64.exe" as File) {
                classifier "windows-x86_64"
                extension "exe"
                builtBy createExe
            }
            pom.withXml {
                // This isn't any sort of Java archive artifact, and OSSRH doesn't enforce
                // javadoc for 'pom' packages. 'exe' would be a more appropriate packaging
                // value, but it isn't clear how that will be interpreted. In addition,
                // 'pom' is typically the value used when building an exe with Maven.
                asNode().project.packaging*.value = 'pom'
            }
        }
    }
}

launch4j {
    outfile = "protoc-gen-grpc-kotlin-windows-x86_64.exe"
    mainClassName = mainClassName
    outputDir = "artifacts"
    jar = '../artifacts/protoc-gen-grpc-kotlin'
}

shadowJar {
    mergeServiceFiles()

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes("Main-Class": mainClassName,
            "Implementation-Version": version)
    }
    archiveName = "protoc-gen-grpc-kotlin"
    destinationDir = "$buildDir/artifacts" as File
}

createExe.dependsOn(shadowJar)
prependShellStub.dependsOn(test)
prependShellStub.dependsOn(shadowJar)
prependShellStub.dependsOn(createExe)
