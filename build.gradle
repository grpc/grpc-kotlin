import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.jetbrains.kotlin.jvm' version'1.3.61' apply false
}

ext {
    grpcVersion = '1.36.0' // CURRENT_GRPC_VERSION
    protobufVersion = '3.14.0'
    kotlinVersion = '1.3.61'
    coroutinesVersion = '1.3.3'
    googleauthVersion = '0.20.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    group = "io.grpc"
    version = "1.0.0" // CURRENT_GRPC_KOTLIN_VERSION
    repositories {
        mavenCentral()
    }
    dependencies {
        testImplementation "junit:junit:4.12"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    plugins.withId("org.jetbrains.dokka") {
        dokka {
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/dokka"
            configuration {
                externalDocumentationLink {
                    url = new URL("http://grpc.github.io/grpc-java/javadoc/")
                }
                externalDocumentationLink {
                    url = new URL("http://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/")
                }
                perPackageOption {
                    prefix = "io.grpc.testing"
                    suppress = true
                }
                perPackageOption {
                    prefix = "io.grpc.kotlin.generator"
                    suppress = true
                }
            }
        }
    }

    if (
        project.name == "grpc-kotlin-stub"
        || project.name == "grpc-kotlin-compiler"
        || project.name == "grpc-kotlin-stub-lite"
    ) {
        apply plugin: 'maven-publish'

        plugins.withId("maven-publish") {
            publishing {
                publications {
                    maven(MavenPublication) {
                        // from components.java

                        pom {
                            name = project.group + ":" + project.name
                            url = 'https://github.com/grpc/grpc-kotlin'
                            afterEvaluate {
                                // description is not available until evaluated.
                                description = project.description
                            }

                            scm {
                                connection = 'scm:git:https://github.com/grpc/grpc-kotlin.git'
                                developerConnection = 'scm:git:git@github.com:grpc/grpc-kotlin.git'
                                url = 'https://github.com/grpc/grpc-kotlin'
                            }

                            licenses {
                                license {
                                    name = 'Apache 2.0'
                                    url = 'https://opensource.org/licenses/Apache-2.0'
                                }
                            }

                            developers {
                                developer {
                                    id = "grpc.io"
                                    name = "gRPC Contributors"
                                    email = "grpc-io@googlegroups.com"
                                    url = "https://grpc.io/"
                                    organization = "gRPC Authors"
                                    organizationUrl = "https://www.google.com"
                                }
                            }
                        }
                    }
                }
                repositories {
                    maven {
                        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                        url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
                        credentials {
                            username project.findProperty("sonatypeUsername") ?: ""
                            password project.findProperty("sonatypePassword") ?: ""
                        }
                    }
                }
            }
        }

        if (project.hasProperty("signing.keyId")) {
            apply plugin: 'signing'
            signing {
                sign publishing.publications
            }
        }
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}
