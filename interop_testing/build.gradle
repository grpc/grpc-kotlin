plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "application"
    id "java"
    id 'com.google.protobuf'

}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}

description = "gRPC: Integration Testing"
startScripts.enabled = false

dependencies {
    compile rootProject
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.61"
    compile "org.jetbrains.kotlin:kotlin-test:1.3.61"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"

    compile "io.grpc:grpc-netty:1.27.0"
    compile "io.grpc:grpc-okhttp:1.27.0"
    compile "io.grpc:grpc-protobuf:1.27.0"
    compile "io.grpc:grpc-stub:1.27.0"
    compile "io.grpc:grpc-testing:1.27.0"
    compile "io.grpc:grpc-alts:1.27.0"
    compile "com.google.guava:guava:28.2-jre"
    compile "com.google.truth:truth:1.0.1"

    // Testing
    testImplementation "com.google.jimfs:jimfs:1.1"
    testImplementation 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'
    testImplementation "com.google.truth.extensions:truth-proto-extension:1.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "junit:junit:4.12"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.2"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.3.2'
    testImplementation "org.jetbrains.kotlin:kotlin-android-extensions:1.3.61"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.0' }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.27.0'
        }
        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            path = "$rootDir/build/install/grpc-kotlin/bin/grpc-kotlin"
        }
    }
    generateProtoTasks {
        all().each { task ->
            if (task.name.startsWith('generateTestProto')) {
                task.dependsOn { installDist }
            }
            task.plugins {
                // Generate Java gRPC classes
                grpc {}
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt {}
            }
        }
    }
}

// For the generated scripts, use Netty tcnative (i.e. OpenSSL).
// Note that OkHttp currently only supports ALPN, so OpenSSL version >= 1.0.2 is required.

task test_client(type: CreateStartScripts) {
    mainClassName = "io.grpc.testing.integration.TestServiceClient"
    applicationName = "test-client"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task test_server(type: CreateStartScripts) {
    mainClassName = "io.grpc.testing.integration.TestServiceServer"
    applicationName = "test-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
    from(test_client)
    from(test_server)
    fileMode = 0755
}

